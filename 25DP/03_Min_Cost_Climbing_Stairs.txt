// Leetcode 746

class Solution {
public:
    int top_down( vector<int>&c , int n , vector<int>&dp )
    {
        if( n == 0 )
            return c[0] ;
        if( n == 1 )
            return c[1] ;
        if( dp[n] != -1 )
            return dp[n] ;
        dp[n] = c[n] + min( solve(c,n-1,dp) , solve(c,n-2,dp)) ;
        return dp[n] ;
    }
    int tabulation( vector<int>&c , int n )
    {
        vector<int>dp(n+1) ;
        dp[0] = c[0] ;
        dp[1] = c[1] ;
        for( int i = 2 ; i < n ; i++ )
            dp[i] = c[i] + min( dp[i-1] , dp[i-2] ) ;
        return min( dp[n-1] , dp[n-2] ) ;
    }
    int minCostClimbingStairs(vector<int>& cost) {
        int n = cost.size() ;
        
        // vector<int>dp( n+1 , -1 ) ;
        // int ans = min( top_down(cost,n-1,dp) , top_down(cost,n-2,dp)) ;
        // return ans ;

        return tabulation( cost , n ) ;
    }
};