LeetCode 322

class Solution {
public:
    int top_down( vector<int>&coins , int x ,vector<int>&dp )
    {
        if( x == 0 )
            return 0 ;
        if( x < 0 )
            return INT_MAX ;
        if( dp[x] != -1 )
            return dp[x] ;
        int mini = INT_MAX ;
        for( int i = 0 ; i < coins.size() ; i++ )
        {
            int ans = top_down( coins , x , dp ) ;
            mini = min( ans , mini ) ;
        }
        dp[x] = mini ;
        return mini ;
    }

    int tabulation( vector<int>&coins , int x )
    {
        vector<int>dp( x+1 , INT_MAX ) ;
        dp[0] = 0 ;
        for( int i = 1 ; i <= x ; i++ )
        {
            for( int j = 0 ; j < coins.size() ; j++ )
            {
                if( i-coins[j] >=0 && dp[i-coins[j]] != INT_MAX )
                    dp[i] = min( dp[i] , 1+ dp[i-coins[j]] ) ;
            }
        }
        if( dp[x] == INT_MAX ) 
            return -1 ;
        return dp[x] ;
    }

    int coinChange(vector<int>& coins, int amount) {
        // int n = coins.size() ;
        // vector<int>dp( amount+1 , -1 ) ;
        // int ans = top_down( coins , amount , dp ) ;
        // if( ans == INT_MAX)
        //     return -1 ;
        // return ans ;

        return tabulation(coins , amount ) ;
    }
};